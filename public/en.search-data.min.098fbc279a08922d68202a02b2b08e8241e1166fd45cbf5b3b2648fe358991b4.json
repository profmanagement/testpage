[{"id":0,"href":"/posts/initiation/","title":"Cheat Sheet for Initiating Hugo Website","section":"Posts","content":"Certainly! Here\u0026rsquo;s a concise cheat sheet summarizing the successful steps you took to create and deploy your first Hugo website using GitHub Pages:\n🛠️ Hugo \u0026amp; GitHub Pages Deployment Cheat Sheet # 1. Install Hugo Extended # Ensure you have the Extended version of Hugo, which is necessary for themes like Ananke that utilize SCSS/SASS\nwget https://github.com/gohugoio/hugo/releases/download/v0.128.0/hugo_extended_0.128.0_Linux-64bit.deb sudo dpkg -i hugo_extended_0.128.0_Linux-64bit.de \n2. Create a New Hugo Site # cd my-hugo-sit \n3. Add a Theme (e.g., Ananke) # git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/anank  Update your configuration file (e.g., config.toml or hugo.toml) to include\n\n4. Create Content #  Edit the new post and set draft: false to make it public\n5. Preview Locally #  Visit http://localhost:1313 in your browser to view your site\n6. Initialize Git Repository # git commit -m \u0026#34;Initial commit \n7. Create GitHub Repository # -Log in to GitHub and create a new repository (e.g., my-hugo-site) -Do not initialize with a README, .gitignore, or license\n8. Add Remote and Push # git branch -M main git push -u origin mai \n9. Set Up GitHub Actions for Deployment # Create the following directory structure and workflow file\nnano .github/workflows/hugo.ym  Paste the following content into hugo.yml\non: push: branches: - main workflow_dispatch: permissions: contents: read pages: write id-token: write concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false jobs: build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.128.0 steps: - name: Install Hugo run: | wget -O hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_Linux-64bit.deb sudo dpkg -i hugo.deb - name: Checkout repository uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Pages id: pages uses: actions/configure-pages@v3 - name: Build with Hugo run: hugo --gc --minify --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: Upload artifact uses: actions/upload-pages-artifact@v1 with: path: ./public deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2  Save and close the file\n10. Commit and Push Workflow # git commit -m \u0026#34;Add GitHub Actions workflow for deployment\u0026#34; git pus \n11. Configure GitHub Pages # -Navigate to your repository on GitHub -Go to Settings \u0026gt; Pages -Under Build and deployment, set Source to GitHub Actions\n12. Access Your Deployed Site # After the workflow completes, your site will be available at\nhttps://your-username.github.io/my-hugo-site \nThis cheat sheet encapsulates the essential steps you followed to successfully create and deploy your Hugo website using GitHub PagesFor more detailed information, you can refer to the official Hugo documentation on hosting with GitHub Pages\nFeel free to reach out if you need further assistance or have additional questions!\n"},{"id":1,"href":"/posts/firstpost/","title":"Firstpost","section":"Posts","content":"Visual Studio Code Docs Updates Blog API Extensions FAQ GitHub Copilot Switch to the light theme Search Docs Download Join us for VS Code Live: Agent Mode Day on April 16th!\nDismiss this update Overview Setup Get Started Configure Edit code Build, Debug, Test Source Control Overview Introduction to Git Collaborate on GitHub FAQ Terminal GitHub Copilot Languages Node.js / JavaScript TypeScript Python Java C++ C# Docker Data Science Intelligent Apps Azure Remote Dev Containers Reference Working with GitHub in VS Code GitHub is a cloud-based service for storing and sharing source code. Using GitHub with Visual Studio Code lets you share your source code and collaborate with others right within your editor. There are many ways to interact with GitHub, for example, via their website at https://github.com or the Git command-line interface (CLI), but in VS Code, the rich GitHub integration is provided by the GitHub Pull Requests and Issues extension.\nInstall the GitHub Pull Requests and Issues extension\nTo get started with the GitHub in VS Code, you\u0026rsquo;ll need to install Git, create a GitHub account and install the GitHub Pull Requests and Issues extension. In this topic, we\u0026rsquo;ll demonstrate how you can use some of your favorite parts of GitHub without leaving VS Code.\nIf you\u0026rsquo;re new to source control or want to learn more about VS Code\u0026rsquo;s basic Git support, you can start with the Source Control topic.\nGetting started with GitHub Pull Requests and Issues Once you\u0026rsquo;ve installed the GitHub Pull Requests and Issues extension, you\u0026rsquo;ll need to sign in. Follow the prompts to authenticate with GitHub in the browser and return to VS Code.\nExtension Sign In\nIf you are not redirected to VS Code, you can add your authorization token manually. In the browser window, you will receive your authorization token. Copy the token, and switch back to VS Code. Select Signing in to github.com\u0026hellip; in the Status bar, paste the token, and hit Enter.\nSetting up a repository Cloning a repository You can search for and clone a repository from GitHub using the Git: Clone command in the Command Palette (Ctrl+Shift+P) or by using the Clone Repository button in the Source Control view (available when you have no folder open).\nClone Repository button in the Source Control view\nFrom the GitHub repository dropdown you can filter and pick the repository you want to clone locally.\nGitHub repository dropdown filtered on microsoft/vscode\nAuthenticating with an existing repository Enabling authentication through GitHub happens when you run any Git action in VS Code that requires GitHub authentication, such as pushing to a repository that you\u0026rsquo;re a member of or cloning a private repository. You don\u0026rsquo;t need to have any special extensions installed for authentication; it is built into VS Code so that you can efficiently manage your repository.\nWhen you do something that requires GitHub authentication, you\u0026rsquo;ll see a prompt to sign in:\nAuthentication Prompt\nFollow the steps to sign into GitHub and return to VS Code. Signing in with a personal access token (PAT) is only supported with GitHub Enterprise Server. If you\u0026rsquo;re using GitHub Enterprise Server and want to use a PAT, then you can hit \u0026ldquo;cancel\u0026rdquo; on the sign in prompts until you are prompted for a PAT.\nNote that there are several ways to authenticate to GitHub, including using your username and password with two-factor authentication (2FA), a personal access token, or an SSH key. See About authentication to GitHub for more information and details about each option.\nNote: If you\u0026rsquo;d like to work on a repository without cloning the contents to your local machine, you can install the GitHub Repositories extension to browse and edit directly on GitHub. You can learn more below in the GitHub Repositories extension section.\nEditor integration Hovers When you have a repository open and a user is @-mentioned, you can hover over that username and see a GitHub-style hover.\nUser Hover\nThere is a similar hover for #-mentioned issue numbers, full GitHub issue URLs, and repository specified issues.\nIssue Hover\nSuggestions User suggestions are triggered by the \u0026ldquo;@\u0026rdquo; character and issue suggestions are triggered by the \u0026ldquo;#\u0026rdquo; character. Suggestions are available in the editor and in the Source Control view\u0026rsquo;s input box.\nUser and Issue suggestions\nThe issues that appear in the suggestion can be configured with the GitHub Issues: Queries (githubIssues.queries) setting. The queries use the GitHub search syntax.\nYou can also configure which files show these suggestions using the settings GitHub Issues: Ignore Completion Trigger (githubIssues.ignoreCompletionTrigger) and GitHub Issues: Ignore User Completion Trigger (githubIssues.ignoreUserCompletionTrigger). These settings take an array of language identifiers to specify the file types.\n// Languages that the \u0026lsquo;#\u0026rsquo; character should not be used to trigger issue completion suggestions. \u0026ldquo;githubIssues.ignoreCompletionTrigger\u0026rdquo;: [ \u0026ldquo;python\u0026rdquo; ] Copy Pull requests From the Pull Requests view you can view, manage, and create pull requests.\nPull Request View\nThe queries used to display pull requests can be configured with the GitHub Pull Requests: Queries (githubPullRequests.queries) setting and use the GitHub search syntax.\n\u0026ldquo;githubPullRequests.queries\u0026rdquo;: [ { \u0026ldquo;label\u0026rdquo;: \u0026ldquo;Assigned To Me\u0026rdquo;, \u0026ldquo;query\u0026rdquo;: \u0026ldquo;is:open assignee:${user}\u0026rdquo; }, Copy Creating pull requests Once you have committed changes to your fork or branch, you can use the GitHub Pull Requests: Create Pull Request command or the Create Pull Request button in the Pull Requests view to create a pull request.\nCreate Pull Request button in the Pull Request view\nA new Create view will be displayed where you can select the base repository and base branch you\u0026rsquo;d like your pull request to target as well as fill in the title and description. If your repository has a pull request template, this will automatically be used for the description.\nUse the buttons in the action bar at the top to add Assignees, Reviewers, Labels and a Milestone.\nCreate Pull Request view\nThe Create button menu allows you to select alternative create options, such as Create Draft or enable an Auto-Merge method.\nOnce you select Create, if you have not already pushed your branch to a GitHub remote, the extension will ask if you\u0026rsquo;d like to publish the branch and provides a dropdown to select the specific remote.\nThe Create Pull Request view now enters Review Mode, where you can review the details of the PR, add comments, and merge the PR once it\u0026rsquo;s ready. After the PR is merged, you\u0026rsquo;ll have the option to delete both the remote and local branch.\nTip Use GitHub Copilot to generate a PR title and description, based on the commits that are included in the PR. Select the sparkle icon next to the PR title field to generate a PR title and description.\nScreenshot that shows the Generate Commit Message with Copilot button in the commit message input box.\nReviewing Pull requests can be reviewed from the Pull Requests view. You can assign reviewers and labels, add comments, approve, close, and merge all from the pull request Description.\nPull Request Description editor\nFrom the Description page, you can also easily checkout the pull request locally using the Checkout button. This will switch VS Code to open the fork and branch of the pull request (visible in the Status bar) in Review Mode and add a new Changes in Pull Request view from which you can view diffs of the current changes as well as all commits and the changes within these commits. Files that have been commented on are decorated with a diamond icon. To view the file on disk, you can use the Open File inline action.\nChanges in Pull Request view\nThe diff editors from this view use the local file, so file navigation, IntelliSense, and editing work as normal. You can add comments within the editor on these diffs. Both adding single comments and creating a whole review is supported.\nWhen you are done reviewing the pull request changes you can merge the PR or select Exit Review Mode to go back to the previous branch you were working on.\nTip You can also let Copilot perform a code review of the PR before you create it. Select the Copilot Code Review button in the GitHub Pull Request view.\nIssues Creating issues Issues can be created from the + button in the Issues view and by using the GitHub Issues: Create Issue from Selection and GitHub Issues: Create Issue from Clipboard commands. They can also be created using a Code Action for \u0026ldquo;TODO\u0026rdquo; comments. When creating issues, you can take the default description or select the Edit Description pencil icon in the upper right to bring up an editor for the issue body.\nCreate Issue from TODO\nYou can configure the trigger for the Code Action using the GitHub Issues: Create Issue Triggers (githubIssues.createIssueTriggers) setting.\nThe default issue triggers are:\n\u0026ldquo;githubIssues.createIssueTriggers\u0026rdquo;: [ \u0026ldquo;TODO\u0026rdquo;, \u0026ldquo;todo\u0026rdquo;, \u0026ldquo;BUG\u0026rdquo;, \u0026ldquo;FIXME\u0026rdquo;, \u0026ldquo;ISSUE\u0026rdquo;, \u0026ldquo;HACK\u0026rdquo; ] Copy Working on issues From the Issues view, you can see your issues and work on them.\nIssue view with hover\nBy default, when you start working on an issue (Start Working on Issue context menu item), a branch will be created for you, as shown in the Status bar in the image below.\nWork on Issue\nThe Status bar also shows the active issue and if you select that item, a list of issue actions are available such as opening the issue on the GitHub website or creating a pull request.\nIssue Status bar actions\nYou can configure the name of the branch using the GitHub Issues: Issue Branch Title (githubIssues.issueBranchTitle) setting. If your workflow doesn\u0026rsquo;t involve creating a branch, or if you want to be prompted to enter a branch name every time, you can skip that step by turning off the GitHub Issues: Use Branch For Issues (githubIssues.useBranchForIssues) setting.\nOnce you are done working on the issue and want to commit a change, the commit message input box in the Source Control view will be populated with a message, which can be configured with GitHub Issues: Working Issue Format SCM (githubIssues.workingIssueFormatScm).\nGitHub Repositories extension The GitHub Repositories extension lets you quickly browse, search, edit, and commit to any remote GitHub repository directly from within Visual Studio Code, without needing to clone the repository locally. This can be fast and convenient for many scenarios, where you just need to review source code or make a small change to a file or asset.\nGitHub Repositories extension\nOpening a repository Once you have installed the GitHub Repositories extension, you can open a repository with the GitHub Repositories: Open Repository\u0026hellip; command from the Command Palette (Ctrl+Shift+P) or by clicking the Remote indicator in the lower left of the Status bar.\nRemote indicator in the Status bar\nWhen you run the Open Repository command, you then choose whether to open a repository from GitHub, open a Pull Request from GitHub, or reopen a repository that you had previously connected to.\nIf you haven\u0026rsquo;t logged into GitHub from VS Code before, you\u0026rsquo;ll be prompted to authenticate with your GitHub account.\nGitHub Repository extension open repository dropdown\nYou can provide the repository URL directly or search GitHub for the repository you want by typing in the text box.\nOnce you have selected a repository or Pull Request, the VS Code window will reload and you will see the repository contents in the File Explorer. You can then open files (with full syntax highlighting and bracket matching), make edits, and commit changes, just like you would working on a local clone of a repository.\nOne difference from working with a local repository is that when you commit a change with the GitHub Repository extension, the changes are pushed directly to the remote repository, similar to if you were working in the GitHub web interface.\nAnother feature of the GitHub Repositories extension is that every time you open a repository or branch, you get the up-to-date sources available from GitHub. You don\u0026rsquo;t need to remember to pull to refresh as you would with a local repository.\nThe GitHub Repositories extension supports viewing and even committing LFS-tracked files without needing to install Git LFS (Large File System) locally. Add the file types you want tracked with LFS to a .gitattributes file, then commit your changes directly to GitHub using the Source Control view.\nSwitching branches You can easily switch between branches by clicking on the branch indicator in the Status bar. One great feature of the GitHub Repositories extension is that you can switch branches without needing to stash uncommitted changes. The extension remembers your changes and reapplies them when you switch branches.\nBranch indicator on the Status bar\nRemote Explorer You can quickly reopen remote repositories with the Remote Explorer available on the Activity bar. This view shows you the previously opened repositories and branches.\nRemote Explorer view\nCreate Pull Requests If your workflow uses Pull Requests, rather than direct commits to a repository, you can create a new PR from the Source Control view. You\u0026rsquo;ll be prompted to provide a title and create a new branch.\nCreate a Pull Request button in the Source Control view\nOnce you have created a Pull Request, you can use the GitHub Pull Request and Issues extension to review, edit, and merge your PR as described earlier in this topic.\nVirtual file system Without a repository\u0026rsquo;s files on your local machine, the GitHub Repositories extension creates a virtual file system in memory so you can view file contents and make edits. Using a virtual file system means that some operations and extensions which assume local files are not enabled or have limited functionality. Features such as tasks, debugging, and integrated terminals are not enabled and you can learn about the level of support for the virtual file system via the features are not available link in the Remote indicator hover.\nRemote indicator hover with features are not available link\nExtension authors can learn more about running in a virtual file system and workspace in the Virtual Workspaces extension author\u0026rsquo;s guide.\nContinue Working On\u0026hellip; Sometimes you\u0026rsquo;ll want to switch to working on a repository in a development environment with support for a local file system and full language and development tooling. The GitHub Repositories extension makes it easy for you to:\nCreate a GitHub codespace (if you have the GitHub Codespaces extension). Clone the repository locally. Clone the repository into a Docker container (if you have Docker and the Microsoft Docker extension installed). To switch development environments, use the Continue Working On\u0026hellip; command, available from the Command Palette (Ctrl+Shift+P) or by clicking on the Remote indicator in the Status bar.\nContinue Working On command in Remote dropdown\nIf you are using the browser-based editor, the \u0026ldquo;Continue Working On\u0026hellip;\u0026rdquo; command has the options to open the repository locally or within a cloud-hosted environment in GitHub Codespaces.\nContinue Working On from web-based editor\nThe first time that you use Continue Working On with uncommitted changes, you will have the option to bring your edits to your selected development environment using Cloud Changes, which stores your pending changes on the same VS Code service used for Settings Sync.\nThese changes are deleted from our service once they are applied to your target development environment. If you choose to continue without your uncommitted changes, you can always change this preference later by configuring the setting \u0026ldquo;workbench.cloudChanges.continueOn\u0026rdquo;: \u0026ldquo;prompt\u0026rdquo;.\nIn the event that your pending changes are not automatically applied to your target development environment, you can view, manage, and delete your stored changes using the Cloud Changes: Show Cloud Changes command.\nNext steps Learn more about Copilot VS Code - Learn about Copilot in VS Code. Was this documentation helpful? Yes, this page was helpfulNo, this page was not helpful 04/03/2025 In this article there are 7 sectionsIn this article Getting started with GitHub Pull Requests and Issues Setting up a repository Editor integration Pull requests Issues GitHub Repositories extension Next steps RSSRSS Feed StackoverflowAsk questions TwitterFollow @code GitHubRequest features IssuesReport issues YouTubeWatch videos Follow us on X VS Code on Github VS Code on YouTube Microsoft homepage Support Privacy Manage Cookies Terms of Use License\n"},{"id":2,"href":"/posts/postupload/","title":"How to Update with each new post","section":"Posts","content":"To publish a new post on your Hugo website hosted via GitHub Pages, follow these steps:\n📝 Step 1: Create a New Post # In your Hugo site\u0026rsquo;s root directory, run\n Replace your-post-title with a suitable filename for your post. This command creates a new Markdown file in the content/posts/ directory\n✏️ Step 2: Edit the Post Content # 1.Open the newly created file in your text editor 2.Modify the front matter at the top of the file to set draft: false so the post will be published\n--- title: \u0026#34;Your Post Title\u0026#34; date: 2025-04-13T20:18:39+02:00 draft: false -- \n3.Add your content below the front matter\n🔍 Step 3: Preview Locally (Optional) # To preview your site with the new pos:\nhugo servr  Then, open http://localhost:1313 in your web browser to view the sit.\n🚀 Step 4: Deploy to GitHub Pages # . Stage all changs:\ngit add . \n. Commit the changs:\ngit commit -m \u0026#34;Add new post: Your Post Title\u0026#34; \n. Push to GitHb:\ngit push Your GitHub Actions workflow will automatically build and deploy the updated sie.\n🌐 Step 5: Verify the Deployment # Navigate to your GitHub repositry.2. Click on the Actions tab to monitor the deployment workfow.3. Once the workflow completes successfully, visit your siteat:\nhttps://your-username.github.io/your-repository-name/ ``` Replace your-username and your-repository-name with your actual GitHub username and repository nme.\n\u0026ndash;\nBy following these steps, your new post will be live on your Hugo-powered GitHub Pages webste.\n"},{"id":3,"href":"/posts/troubleshooting/","title":"Troubleshooting","section":"Posts","content":"The error message you\u0026rsquo;re encountering indicates that your local repository is out of sync with the remote repository on GitHub. This typically happens when the remote repository has commits that your local repository doesn\u0026rsquo;t have. To resolve this, you\u0026rsquo;ll need to update your local repository with the changes from the remote repository before pushing your new changes.\n🔄 Step-by-Step Solution # Fetch and Rebase Remote Changes\nThis step updates your local repository with the latest changes from the remote repository and replays your local commits on top of them:\ngit pull --rebase origin main \n-If your default branch is named master instead of main, replace main with master in the command above\n-If you encounter merge conflicts during this process, Git will pause and allow you to resolve them. After resolving any conflicts, continue the rebase with\n```bash git rebase --continue ``` Push Your Changes to the Remote Repository\nAfter successfully rebasing, you can push your local commits to the remote repository:\ngit push origin main \n-Again, replace main with master if that\u0026rsquo;s your default branch name\n⚠️ Important Considerations # Avoid Using --force:While you might come across suggestions to use git push --force, this command can overwrite changes in the remote repository, potentially leading to data loss. It\u0026rsquo;s safer to use git pull --rebase as described above\nRegularly Sync with Remote:To minimize such conflicts, regularly pull changes from the remote repository before making new commits\nIf you continue to experience issues or need further assistance, feel free to ask!\n"}]